{"ast":null,"code":"export function uniq(xs) {\n  return Array.from(new Set(xs));\n}\nexport function match(numb, guess) {\n  let numbers = numb.split('');\n  let goods = guess.split('').filter(x => numbers.includes(x));\n  let bulls = 0;\n  let cows = goods.length;\n\n  for (const x in goods) {\n    if (numb.indexOf(x) == guess.indexOf(x)) {\n      cows -= 1;\n      bulls += 1;\n    }\n  }\n\n  return bulls + \"B\" + cows + \"C\";\n}\nexport function test_guess(text) {\n  if (text.length == 4) {\n    let isUnique = true;\n    let copy = text.slice();\n    let i, j;\n\n    for (i = 0; i < 4; i++) {\n      for (j = i + 1; j < 4; j++) {\n        if (copy[i] === text[j]) {\n          isUnique = false;\n        }\n      }\n    }\n\n    if (isUnique) {\n      return true;\n    } else {\n      alert(\"Your four-digit guess must have four unique digits!\");\n      return false;\n    }\n  } else {\n    alert(\"Your guess must be a four-digit number!\");\n    return false;\n  }\n}\nexport function make_secret_numb() {\n  Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"sources":["/Users/abbycarr/bulls-and-cows/src/game.js"],"names":["uniq","xs","Array","from","Set","match","numb","guess","numbers","split","goods","filter","x","includes","bulls","cows","length","indexOf","test_guess","text","isUnique","copy","slice","i","j","alert","make_secret_numb","Math","floor","random","max","min"],"mappings":"AAAA,OAAO,SAASA,IAAT,CAAcC,EAAd,EAAkB;AACvB,SAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQH,EAAR,CAAX,CAAP;AACD;AAED,OAAO,SAASI,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAEjC,MAAIC,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAW,EAAX,CAAd;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBE,MAAhB,CAAwBC,CAAD,IAAOJ,OAAO,CAACK,QAAR,CAAiBD,CAAjB,CAA9B,CAAZ;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAGL,KAAK,CAACM,MAAjB;;AAEA,OAAK,MAAMJ,CAAX,IAAgBF,KAAhB,EAAuB;AACrB,QAAIJ,IAAI,CAACW,OAAL,CAAaL,CAAb,KAAmBL,KAAK,CAACU,OAAN,CAAcL,CAAd,CAAvB,EAAyC;AACvCG,MAAAA,IAAI,IAAI,CAAR;AACAD,MAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACD,SAAQA,KAAK,GAAG,GAAR,GAAcC,IAAd,GAAqB,GAA7B;AACD;AAED,OAAO,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,MAAIA,IAAI,CAACH,MAAL,IAAe,CAAnB,EAAsB;AACpB,QAAII,QAAQ,GAAG,IAAf;AACA,QAAIC,IAAI,GAAGF,IAAI,CAACG,KAAL,EAAX;AACA,QAAIC,CAAJ,EAAOC,CAAP;;AACA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,WAAKC,CAAC,GAAGD,CAAC,GAAG,CAAb,EAAgBC,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIH,IAAI,CAACE,CAAD,CAAJ,KAAYJ,IAAI,CAACK,CAAD,CAApB,EAAyB;AACvBJ,UAAAA,QAAQ,GAAG,KAAX;AACD;AACF;AACF;;AACD,QAAIA,QAAJ,EAAc;AACZ,aAAO,IAAP;AACD,KAFD,MAGK;AACHK,MAAAA,KAAK,CAAC,qDAAD,CAAL;AACA,aAAO,KAAP;AACD;AACF,GAlBD,MAmBK;AACHA,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjCC,EAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBC,GAAG,GAAGC,GAAvB,IAA8BA,GAAzC;AACD","sourcesContent":["export function uniq(xs) {\n  return Array.from(new Set(xs));\n}\n\nexport function match(numb, guess) {\n\n  let numbers = numb.split('');\n  let goods = guess.split('').filter((x) => numbers.includes(x));\n  let bulls = 0;\n  let cows = goods.length;\n\n  for (const x in goods) {\n    if (numb.indexOf(x) == guess.indexOf(x)) {\n      cows -= 1;\n      bulls += 1;\n    }\n  }\n  return (bulls + \"B\" + cows + \"C\");\n}\n\nexport function test_guess(text) {\n  if (text.length == 4) {\n    let isUnique = true;\n    let copy = text.slice();\n    let i, j;\n    for (i = 0; i < 4; i++) {\n      for (j = i + 1; j < 4; j++) {\n        if (copy[i] === text[j]) {\n          isUnique = false;\n        }\n      }\n    }\n    if (isUnique) {\n      return true;\n    }\n    else {\n      alert(\"Your four-digit guess must have four unique digits!\");\n      return false;\n    }\n  }\n  else {\n    alert(\"Your guess must be a four-digit number!\");\n    return false;\n  }\n}\n\nexport function make_secret_numb() {\n  Math.floor(Math.random() * (max - min) + min)\n}"]},"metadata":{},"sourceType":"module"}