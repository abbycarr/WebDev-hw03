{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["make_secret_numb","numbs","sort","Math","random","GameLost","r","reset","className","class","onClick","GameWon","App","useState","text","setText","guesses","setGuesses","results","setResults","numb","setNumb","guess","length","i","j","isUnique","copy","slice","alert","test_guess","ng","xs","concat","Array","from","Set","res","numbers","split","goods","filter","x","includes","bulls","cows","n","g","indexOf","match","newGame","href","rel","target","type","value","onChange","ev","vv","cc","isNaN","onKeyPress","key","max-height","data-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.054495c9.chunk.js","sourcesContent":["export function uniq(xs) {\n  return Array.from(new Set(xs));\n}\n\nexport function match(numb, guess) {\n\n  let numbers = numb.split('');\n  let goods = guess.split('').filter((x) => numbers.includes(x));\n  let bulls = 0;\n  let cows = goods.length;\n\n  let n = numb.slice();\n  let g = guess.slice();\n\n  for (let i = 0; i < goods.length; i++) {\n    let x = goods[i];\n    if (n.indexOf(x) == g.indexOf(x)) {\n      cows -= 1;\n      bulls += 1;\n    }\n  }\n  return (bulls + \"B\" + cows + \"C\");\n}\n\nexport function test_guess(text) {\n  if (text.length == 4) {\n    let isUnique = true;\n    let copy = text.slice();\n    let i, j;\n    for (i = 0; i < 4; i++) {\n      for (j = i + 1; j < 4; j++) {\n        if (copy[i] === text[j]) {\n          isUnique = false;\n        }\n      }\n    }\n    if (isUnique) {\n      return true;\n    }\n    else {\n      alert(\"Your four-digit guess must have four unique digits!\");\n      return false;\n    }\n  }\n  else {\n    alert(\"Your guess must be a four-digit number!\");\n    return false;\n  }\n}\n\nexport function make_secret_numb() {\n  let numbs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  numbs = numbs.sort(() => Math.random() - 0.5);\n  return (\"\" + numbs[0] + numbs[1] + numbs[2] + numbs[3]);\n}","import { useState } from 'react';\nimport { uniq, match, test_guess, make_secret_numb } from './game';\nimport './App.css';\n\n\nfunction GameLost(r) {\n  let { reset } = r;\n  return (\n    <div className=\"App\">\n      <h1>You Lost!</h1>\n      <h3>Try again?</h3>\n      <p>\n        <button class=\"tertiary\" onClick={reset}>\n          New Game\n        </button>\n      </p>\n    </div>\n  );\n}\n\nfunction GameWon(r) {\n  let { reset } = r;\n  return (\n    <div className=\"App\">\n      <h1>You Won!</h1>\n      <h3>Play again?</h3>\n      <p>\n        <button class=\"tertiary\" onClick={reset}>\n          New Game\n        </button>\n      </p>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const [text, setText] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [results, setResults] = useState([]);\n  const [numb, setNumb] = useState(make_secret_numb());\n\n  let turns = 8 - guesses.length;\n\n  function updateText(ev) {\n    let vv = ev.target.value;\n    let cc = vv[vv.length - 1];\n    if (!isNaN(cc) || vv === \"\") {\n      setText(vv);\n    }\n  }\n\n  function guess() {\n    if (test_guess(text)) {\n      let ng = uniq(guesses.concat(text));\n      setGuesses(ng);\n      let res = match(numb, text);\n      setResults([...results, res]);\n      setText(\"\");\n    }\n  }\n\n  function keyPress(ev) {\n    if (ev.key === \"Enter\") {\n      guess();\n    }\n  }\n\n  function newGame() {\n    setText(\"\");\n    setGuesses([]);\n    setResults([]);\n    setNumb(make_secret_numb());\n  }\n\n  if (turns <= 0) {\n    return <GameLost reset={newGame} />;\n  }\n\n  if (results[results.length - 1] == \"4B0C\") {\n    return <GameWon reset={(newGame)} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Bulls and Cows</h1>\n      <p>Guess the four-digit number. More information on the game&nbsp;\n       <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" rel=\"noreferrer\" target=\"_blank\">here</a>\n        .\n      </p>\n      <p>\n        Input:&nbsp;\n        <input type=\"text\"\n          value={text}\n          onChange={updateText}\n          onKeyPress={keyPress} />\n        <button class=\"inverse\" onClick={guess}>OK</button>\n      </p>\n      <table max-height=\"800px\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Guess</th>\n            <th>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td data-label=\"Count\">1</td>\n            <td data-label=\"Guess\">{guesses[0]}</td>\n            <td data-label=\"Result\">{results[0]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">2</td>\n            <td data-label=\"Guess\">{guesses[1]}</td>\n            <td data-label=\"Result\">{results[1]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">3</td>\n            <td data-label=\"Guess\">{guesses[2]}</td>\n            <td data-label=\"Result\">{results[2]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">4</td>\n            <td data-label=\"Guess\">{guesses[3]}</td>\n            <td data-label=\"Result\">{results[3]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">5</td>\n            <td data-label=\"Guess\">{guesses[4]}</td>\n            <td data-label=\"Result\">{results[4]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">6</td>\n            <td data-label=\"Guess\">{guesses[5]}</td>\n            <td data-label=\"Result\">{results[5]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">7</td>\n            <td data-label=\"Guess\">{guesses[6]}</td>\n            <td data-label=\"Result\">{results[6]}</td>\n          </tr>\n          <tr>\n            <td data-label=\"Count\">8</td>\n            <td data-label=\"Guess\">{guesses[7]}</td>\n            <td data-label=\"Result\">{results[7]}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button onClick={newGame}>New Game</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}